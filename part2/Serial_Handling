#include "serial_handling.h"
//#include "serialport.h"
//MCUFRIEND_kbv tft;
extern shared_vars shared;

String readData(int timeout){
  String line = "";
  unsigned long time = millis();
  while(true){
    if(millis() - time >= timeout){
      return "Passed";
    }
    if(Serial.available() != 0){
      char data = Serial.read();
      line = line+data;
      if(data == '\n' || line.length() >= 200){
        return line;
      }
    }
  }
  
}

uint8_t get_waypoints(const lon_lat_32& start, const lon_lat_32& end) {
  String startLon = String(start.lon);
  String startLat = String(start.lat);
  String endLon = String(end.lon);
  String endLat = String(end.lat);
  //list<pair<int, int>> path;
  // String test = readData(1000);
  // Serial.println(test);
  String stringTogether = "R " + startLat + " " + startLon + " " + endLat + " " + endLon + "\n";
  Serial.print(stringTogether);
  Serial.flush();
  int numCommands;
  delay(1000);
  // Serial.println("Hello");
  String commandLine = readData(10000);
  Serial.println(commandLine);
  if(commandLine[0] == 'N'){
    numCommands = commandLine.substring(2).toInt();
    if(numCommands == 0){
      return 1;
    }
    Serial.print("A\n");
    Serial.flush();
    shared.num_waypoints = numCommands;
    int i = 0;
    while(true){
      commandLine = readData(1000);
      if(commandLine[0] == 'W'){
        int index = commandLine.indexOf(" ", 2);
        int lat = (commandLine.substring(2, index)).toInt();
        int lon = (commandLine.substring(index+1)).toInt();
        shared.waypoints[i].lon = lon;
        shared.waypoints[i].lat = lat;
        i++;
        Serial.print("A\n");
        Serial.flush();
      }else if(commandLine[0] == 'E'){
        break;
      }
    }
    return 1;
  }
  delay(10000);
  while(Serial.available() > 0){
    Serial.read();
  }
  return 0;
}
